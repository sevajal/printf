.\" Automatically generated by Pandoc 2.5
.\"
.TH "" "" "" ""
.hy
.PP
\&.\[dq] Automatically generated by Pandoc 2.5 .\[dq] .TH \[dq]\[dq]
\[dq]\[dq] \[dq]\[dq] \[dq]\[dq] \[dq]\[dq] .hy .PP &./[dq]This is the
manpage of the _printf project in Holberton School &.TH _PRINTF 3 [lq]24
March 2022[rq] [lq]0x11.
C[rq] [dq]_printf man page[dq] .PP &.SH SYNOPSIS .B #include
[lq]main.h[rq] .B int printf(const char *, &\&...); .PP &.SH NAME .B
_printf \- Formatted output conversion.
\&.PP &.SH SYNOPSIS .B #include [lq]main.h[rq] .B int printf(const char
*, &\&...); .PP &.SH DESCRIPTION .B _printf() The _printf()function
produce output according to a format as described below.
The _printf()function write output to stdout, the standard output stream
and return the number of characters printed.
\&.PP The function write the output under the control of a format string
that specifies how subsequent arguments are converted for output.
\&.PP of the format string The format string is a character string,
beginning and ending in its initial shift state, if any.
The format string is composed of zero or more directives: ordinary
characters (not %), which are copied unchanged to the output stream; and
conversion specifications, each of which results in fetching zero or
more subsequent arguments.
Each conversion specification is introduced by the character %, and ends
with a conversion specifier.
\&.PP The overall syntax of a conversion specification is: .PP
%conversion .PP The arguments must correspond properly (after type
promotion) with the conversion specifier.
By default, the arguments are used in the order given and each
conversion specifier asks for the next argument (and it is an error if
insufficiently many arguments are given).
\&.PP especifies .PP A character that specifies the type of conversion
to be applied.
The conversion specifiers and their meanings are: .PP &.ti 5[, i] The
int argument is converted to signed decimal notation.
\&.PP &.ti 5[, X] The unsigned int argument is converted to unsigned
decimal (u), or unsigned hexadecimal (the letters ABCDEF are used for X
conversions.
&.ti 5[] The int argument is converted to an unsigned char, and the
resulting character is written.
\&.PP &.ti 5[] The const char * argument is expected to be a pointer to
an array of character type (pointer to a string).
Characters from the array are written up to (but not including) a
terminating null byte
(\f[C]\[rs][rs]0\[aq]). .PP \[rs]&.ti 5[%] A\f[R]%\[cq] is written.
No argument is converted.
The complete conversion specification is \[ga]%%\[cq].
\&.PP VALUE Upon successful return, these function return the number of
characters printed (excluding the null byte used to end output to
strings).
\&.PP Written by Ricardo Monta[\[ti]n]a and Sebastian Carvajal
